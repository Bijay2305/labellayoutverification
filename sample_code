import keras
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator

# Define model architecture
model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(224, 224, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(num_classes, activation='softmax'))

# Compile model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Create data generator for training and validation data
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

# Define paths to training and validation data
train_dir = 'path/to/training/data'
validation_dir = 'path/to/validation/data'

# Set batch size and number of epochs
batch_size = 32
num_epochs = 10

# Train model on training data
train_generator = train_datagen.flow_from_directory(train_dir, target_size=(224, 224), batch_size=batch_size, class_mode='categorical')
validation_generator = test_datagen.flow_from_directory(validation_dir, target_size=(224, 224), batch_size=batch_size, class_mode='categorical')
model.fit_generator(train_generator, steps_per_epoch=train_steps, epochs=num_epochs, validation_data=validation_generator, validation_steps=val_steps)

# Save model
model.save('path/to/model.h5')
++++++++++++++++++++++++++++++++++++++++++++++++++++
# Load model
model = keras.models.load_model('path/to/model.h5')

# Load image
img = keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))
x = keras.preprocessing.image.img_to_array(img)
x = np.expand_dims(x, axis=0)

# Make prediction
predictions = model.predict(x)

# Convert prediction to label text and bounding boxes
label_texts = []
bounding_boxes = []
for i, prediction in enumerate(predictions):
    class_index = np.argmax(prediction)
    label_text = class_names[class_index]
    label_texts.append(label_text)
    box = get_bounding_box(prediction)
    bounding_boxes.append(box)

# Display results
for i, box in enumerate(bounding_boxes):
    label_text = label_texts[i]
    xmin, ymin, xmax, ymax = box
    cv2
